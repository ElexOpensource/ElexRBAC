// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RbacDashboard.DAL.Data;

#nullable disable

namespace RbacDashboard.DAL.Migrations.SqlMigrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [ExcludeFromCodeCoverage(Justification = "Memory DB migration cannot be tested due to limitations.")]
    partial class SqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("RBAC")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RbacDashboard.DAL.Models.Access", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("OptionsetMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OptionsetMasterId");

                    b.HasIndex("ParentId");

                    b.ToTable("Access", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Application", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customer", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.OptionsetMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JsonObject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("OptionsetMaster", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Permissionset", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PermissionTypeId");

                    b.ToTable("Permissionset", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeMasterId");

                    b.ToTable("Role", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.RoleAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AccessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessMetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOverwrite")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAccess", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.TypeMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OptionsetMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OptionsetMasterId");

                    b.ToTable("TypeMaster", "RBAC");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Access", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.Application", "Application")
                        .WithMany("Accesses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_Access_ApplicationId_Application_Id");

                    b.HasOne("RbacDashboard.DAL.Models.OptionsetMaster", "OptionsetMaster")
                        .WithMany("Accesses")
                        .HasForeignKey("OptionsetMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_Access_OptionsetMasterId_OptionsetMaster_Id");

                    b.HasOne("RbacDashboard.DAL.Models.Access", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Access_ParentId_Access_Id");

                    b.Navigation("Application");

                    b.Navigation("OptionsetMaster");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Application", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.Customer", "Customer")
                        .WithMany("Applications")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Application_CustomerId_Customer_Id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Permissionset", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.Permissionset", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Permissionset_ParentId_Permissionset_Id");

                    b.HasOne("RbacDashboard.DAL.Models.OptionsetMaster", "PermissionType")
                        .WithMany("Permissionsets")
                        .HasForeignKey("PermissionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Permissionset_PermissionTypeId_OptionsetMaster_Id");

                    b.Navigation("Parent");

                    b.Navigation("PermissionType");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Role", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.Application", "Application")
                        .WithMany("Roles")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_Roles_ApplicationId_Application_Id");

                    b.HasOne("RbacDashboard.DAL.Models.Role", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Roles_ParentId_Roles_Id");

                    b.HasOne("RbacDashboard.DAL.Models.TypeMaster", "TypeMaster")
                        .WithMany("Roles")
                        .HasForeignKey("TypeMasterId")
                        .IsRequired()
                        .HasConstraintName("FK_Roles_TypeMasterId_TypeMaster_Id");

                    b.Navigation("Application");

                    b.Navigation("Parent");

                    b.Navigation("TypeMaster");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.RoleAccess", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.Access", "Access")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("AccessId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleAccess_AccessId_Access_Id");

                    b.HasOne("RbacDashboard.DAL.Models.Application", "Application")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("ApplicationId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleAccess_ApplicationId_Application_Id");

                    b.HasOne("RbacDashboard.DAL.Models.Role", "Role")
                        .WithMany("RoleAccesses")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleAccess_RoleId_Roles_Id");

                    b.Navigation("Access");

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.TypeMaster", b =>
                {
                    b.HasOne("RbacDashboard.DAL.Models.OptionsetMaster", "OptionsetMaster")
                        .WithMany("TypeMasters")
                        .HasForeignKey("OptionsetMasterId")
                        .HasConstraintName("FK_TypeMaster_OptionsetMasterId_OptionsetMaster_Id");

                    b.Navigation("OptionsetMaster");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Access", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("RoleAccesses");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Application", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("RoleAccesses");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Customer", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.OptionsetMaster", b =>
                {
                    b.Navigation("Accesses");

                    b.Navigation("Permissionsets");

                    b.Navigation("TypeMasters");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Permissionset", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.Role", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("RoleAccesses");
                });

            modelBuilder.Entity("RbacDashboard.DAL.Models.TypeMaster", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
